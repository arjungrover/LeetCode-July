/*
So if we take above example [1,2,1,3,2,5], then XOR of array will be XOR of 3 and 5. We need to figure out how to determine individual numbers from the XOR of array. 

xor of all numbers will give us 3^5 = 6. 011 ^ 101 = 110 

XOR of array will always have at least one set bit, because that bit will differentiate among the two numbers. If there are more than one set bit, we can select any bit and make a bitmask. These set bit occur because of difference in numbers, that's why we select any set bit and create a mask from it so that some numbers pass through it and others won't.

now we take any set bit . 
we will take lowest set bit as we got its formula : xor & (-xor)   [??]

Now if take it as mask and do xor of every number with it. we will make two groups.

Actually what is happening :
we have created mask from xor ; all numbers which are coming twice will nullify each other and remaining two elements will contribute to mask. 
The on bit is due to xor of two remaining elements [as different bits will xor to 1]

Now when we do and operation with mask; one element which have off bit will give zero and other will give some non zero value;
All elements will give some value based on their bit[0/1];

Then we got two groups. we can say for sure that elements which are coming once will be in diff group.
All remaining elements can be in any group but they will be in pairs.

when we xor each group, we got only element that is coming once .


*/

class Solution {
    public int[] singleNumber(int[] nums) {
        int xor = 0;
        for(int num:nums){
            xor^=num;
        }
        
        xor&=(-xor);  //lowest set bit
        
        int[] res = {0,0};
        
        for(int num:nums){
            
            if((num&xor)==0){
                
                res[0]^=num;
                
            }else{
                
                res[1]^=num;
            }
            
        }
        
        return res;
        
    }
}
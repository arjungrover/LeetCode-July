/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
    if(root==null){
        
        return new ArrayList<>();
        
    }
    List<List<Integer>> res = new ArrayList<>();
        
    Queue<TreeNode> queue = new LinkedList<>();
    queue.add(root);
    queue.add(null);

    Stack<List<Integer>> st = new Stack<>();
        
    List<Integer> temp = new ArrayList<>();
        
    while(queue.size()>0){
        TreeNode node = queue.remove();
        if(node==null && queue.size()>0){
            queue.add(null);
            st.push(temp);
            temp = new ArrayList<>();
            continue;
        }
        if(node==null && queue.size()==0){
            st.push(temp);
            continue;
        }
            
        
        temp.add(node.val);
        
        if(node.left!=null)
            queue.add(node.left);
        
        if(node.right!=null)
            queue.add(node.right);
        
    }
        
      while(st.size()>0){
          res.add(st.pop());
      }
        
      return res;  
    }
}